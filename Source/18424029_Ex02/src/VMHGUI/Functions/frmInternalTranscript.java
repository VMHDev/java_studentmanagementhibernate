/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VMHGUI.Functions;

import VMHBUS.*;
import VMHDAO.*;
import VMHDTO.*;
import VMHPOJO.*;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author VMHIT
 */
public class frmInternalTranscript extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmInternalClass
     */
    public frmInternalTranscript() {
        initComponents();
        lblInfoTranscript.setHorizontalAlignment(SwingConstants.CENTER);
        lblInfoTranscript.setVerticalAlignment(SwingConstants.CENTER);

        LoadDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlButton = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        pnlTable = new javax.swing.JScrollPane();
        tblTranscript = new javax.swing.JTable();
        pnlInfo = new javax.swing.JPanel();
        lblInfoTranscript = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cboSubject = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtScoresMid = new javax.swing.JTextField();
        txtScoresOther = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboClass = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtScoresSum = new javax.swing.JTextField();
        txtScoresEnd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cboStudent = new javax.swing.JComboBox<>();

        setClosable(true);
        setTitle("Bảng điểm");

        btnExit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnExit.setText("Thoát");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit)
                .addGap(20, 20, 20))
        );

        pnlButtonLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnDelete, btnExit, btnSave});

        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnAdd)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnExit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlButtonLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnDelete, btnExit, btnSave});

        tblTranscript.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblTranscript.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTranscriptMouseClicked(evt);
            }
        });
        pnlTable.setViewportView(tblTranscript);

        lblInfoTranscript.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblInfoTranscript.setText("Thông tin bảng điểm");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Môn học:");

        cboSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSubjectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setLabelFor(txtScoresOther);
        jLabel2.setText("Sinh viên:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setLabelFor(txtScoresOther);
        jLabel5.setText("Điểm GK:");

        txtScoresMid.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtScoresOther.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setLabelFor(txtScoresOther);
        jLabel6.setText("Điểm khác:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Lớp:");

        cboClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClassActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setLabelFor(txtScoresOther);
        jLabel7.setText("Điểm Tổng:");

        txtScoresSum.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtScoresEnd.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setLabelFor(txtScoresOther);
        jLabel3.setText("Điểm CK:");

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblInfoTranscript, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboStudent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboSubject, 0, 243, Short.MAX_VALUE)
                    .addComponent(txtScoresMid, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(txtScoresOther, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboClass, 0, 244, Short.MAX_VALUE)
                    .addComponent(txtScoresSum, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(txtScoresEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfoTranscript)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cboClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtScoresMid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtScoresEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtScoresOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtScoresSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTable)
            .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void LoadDefault() {
        try {
            LoadDataToTable();
            LoadDataToCombobox();
        } catch (IOException ex) {
            Logger.getLogger(frmInternalTranscript.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void LoadDataToCombobox() {
        List<Classdto> arrlstClass = ClassDAO.GetAllClass();
        Classdto[] arrClass = arrlstClass.toArray(new Classdto[arrlstClass.size()]);
        DefaultComboBoxModel dmdCboClass = new DefaultComboBoxModel(arrClass);
        cboClass.setModel(dmdCboClass);

        List<Subjectdto> arrlstSubject = SubjectDAO.GetAllSubject();
        Subjectdto[] arrSubject = arrlstSubject.toArray(new Subjectdto[arrlstClass.size()]);
        DefaultComboBoxModel dmdCboSubject = new DefaultComboBoxModel(arrSubject);
        cboSubject.setModel(dmdCboSubject);

        Classdto modelClass = (Classdto) cboClass.getSelectedItem();
        Subjectdto modelSubject = (Subjectdto) cboSubject.getSelectedItem();
        List<Studentdto> lstStudent = StudentDAO.GetStudentWithSchedule(new ScheduledtoId(modelClass, modelSubject));
        Studentdto[] arrStudent = lstStudent.toArray(new Studentdto[lstStudent.size()]);
        DefaultComboBoxModel dmdCboStudent = new DefaultComboBoxModel(arrStudent);
        cboStudent.setModel(dmdCboStudent);
    }

    public void LoadDataToTable() throws IOException {
        String[] colNames = new String[]{"MSSV", "Họ tên", "Điểm GK", "Điểm CK", "Điểm khác", "Điểm tổng", "ID Sinh viên", "ID Môn học", "ID Lớp"};
        DefaultTableModel modelObj = new DefaultTableModel(null, colNames);
        List<Transcriptdto> lstObj = TranscriptDAO.GetAllTranscript();

        for (int i = 0; i < lstObj.size(); i++) {
            @SuppressWarnings("UseOfObsoleteCollectionType")
            Vector<String> vecDataLine = new Vector<String>();
            vecDataLine.add(0, lstObj.get(i).getId().getStudentId().getStudentCode());
            vecDataLine.add(1, lstObj.get(i).getId().getStudentId().getStudentName());
            vecDataLine.add(2, Float.toString(lstObj.get(i).getScoresMid()));
            vecDataLine.add(3, Float.toString(lstObj.get(i).getScoresEnd()));
            vecDataLine.add(4, Float.toString(lstObj.get(i).getScoresOther()));
            vecDataLine.add(5, Float.toString(lstObj.get(i).getScoresSum()));
            vecDataLine.add(6, Integer.toString(lstObj.get(i).getId().getStudentId().getId()));
            vecDataLine.add(7, Integer.toString(lstObj.get(i).getId().getSubjectId().getId()));
            vecDataLine.add(8, Integer.toString(lstObj.get(i).getId().getClassId().getId()));
            modelObj.addRow(vecDataLine);
        }
        tblTranscript.setModel(modelObj);
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Integer rs = 0;
        Classdto modelClass = (Classdto) cboClass.getSelectedItem();
        Subjectdto modelSubject = (Subjectdto) cboSubject.getSelectedItem();
        Studentdto modelStudent = (Studentdto) cboStudent.getSelectedItem();
        TranscriptdtoId objTranscriptId = new TranscriptdtoId(modelStudent, modelClass, modelSubject);

        Float scoresMid = Float.parseFloat(txtScoresMid.getText());
        Float scoresEnd = Float.parseFloat(txtScoresEnd.getText());
        Float scoresOther = Float.parseFloat(txtScoresOther.getText());
        Float scoresSum = Float.parseFloat(txtScoresSum.getText());
        Transcriptdto objTranscript = new Transcriptdto(objTranscriptId, scoresMid, scoresEnd, scoresOther, scoresSum);

        rs = TranscriptDAO.AddTranscript(objTranscript);
        if (null == rs) {
            JOptionPane.showMessageDialog(null, "Thêm thời điểm thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            switch (rs) {
                case 1:
                    JOptionPane.showMessageDialog(null, "Thêm thời điểm thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    LoadDefault();
                    break;
                case -1:
                    JOptionPane.showMessageDialog(null, "Dữ liệu đã tồn tại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    LoadDefault();
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Thêm thời điểm thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    @SuppressWarnings("null")
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Integer rs = 0;
        Classdto modelClass = (Classdto) cboClass.getSelectedItem();
        Subjectdto modelSubject = (Subjectdto) cboSubject.getSelectedItem();
        Studentdto modelStudent = (Studentdto) cboStudent.getSelectedItem();
        TranscriptdtoId objTranscriptId = new TranscriptdtoId(modelStudent, modelClass, modelSubject);

        Float scoresMid = Float.parseFloat(txtScoresMid.getText());
        Float scoresEnd = Float.parseFloat(txtScoresEnd.getText());
        Float scoresOther = Float.parseFloat(txtScoresOther.getText());
        Float scoresSum = Float.parseFloat(txtScoresSum.getText());

        Transcriptdto objTranscript = TranscriptDAO.GetTranscriptWithID(objTranscriptId);
        if (objTranscript != null) {
            objTranscript.setScoresMid(scoresMid);
            objTranscript.setScoresEnd(scoresEnd);
            objTranscript.setScoresOther(scoresOther);
            objTranscript.setScoresSum(scoresSum);
            objTranscript.setUpdatedDate(new Date());
            rs = TranscriptDAO.UpdateScoresTranscript(objTranscript);
        } else {
            JOptionPane.showMessageDialog(null, "Không tìm thấy thông tin sinh viên", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            LoadDefault();
            return;
        }

        if (rs == 1) {
            JOptionPane.showMessageDialog(null, "Cập nhật thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            LoadDefault();
        } else {
            JOptionPane.showMessageDialog(null, "Cập nhật thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblTranscript.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn dữ liệu cần xóa", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn chắc chắn muốn xóa?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.NO_OPTION || dialogResult == JOptionPane.CLOSED_OPTION) {
            return;
        }

        DTOStudentSubject modelStudent = (DTOStudentSubject) cboStudent.getSelectedItem();
        long studentID = modelStudent.getID();
        DTOSubject modelSubject = (DTOSubject) cboSubject.getSelectedItem();
        long subjectID = modelSubject.getID();

        int rs = DAOTranscript.DeleteTranscript(studentID, subjectID);
        switch (rs) {
            case 1:
                JOptionPane.showMessageDialog(null, "Xóa thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                LoadDefault();
                break;
            case 0:
                JOptionPane.showMessageDialog(null, "Không có dữ liệu để xóa", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Xóa thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                break;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void tblTranscriptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTranscriptMouseClicked
        JTable sourceTable = (JTable) evt.getSource();
        int row = sourceTable.rowAtPoint(evt.getPoint());

        txtScoresMid.setText(sourceTable.getModel().getValueAt(row, 2).toString());
        txtScoresEnd.setText(sourceTable.getModel().getValueAt(row, 3).toString());
        txtScoresOther.setText(sourceTable.getModel().getValueAt(row, 4).toString());
        txtScoresSum.setText(sourceTable.getModel().getValueAt(row, 5).toString());

        Integer studentID = Integer.parseInt(sourceTable.getModel().getValueAt(row, 6).toString());
        clsUtilityCombobox.setSelectStudentWithID(cboStudent, studentID);
        Integer subjectID = Integer.parseInt(sourceTable.getModel().getValueAt(row, 7).toString());
        clsUtilityCombobox.setSelectSubjectWithID(cboSubject, subjectID);
        Integer classID = Integer.parseInt(sourceTable.getModel().getValueAt(row, 8).toString());
        clsUtilityCombobox.setSelectClassWithID(cboClass, classID);
    }//GEN-LAST:event_tblTranscriptMouseClicked

    private void cboSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSubjectActionPerformed
        JComboBox<String> combo = (JComboBox<String>) evt.getSource();
        Subjectdto modelSubject = (Subjectdto) combo.getSelectedItem();

        Classdto modelClass = (Classdto) cboClass.getSelectedItem();
        if (modelClass == null) {
            return;
        }

        List<Studentdto> lstStudent = StudentDAO.GetStudentWithSchedule(new ScheduledtoId(modelClass, modelSubject));
        Studentdto[] arrStudent = lstStudent.toArray(new Studentdto[lstStudent.size()]);
        DefaultComboBoxModel dmdCboStudent = new DefaultComboBoxModel(arrStudent);
        cboStudent.setModel(dmdCboStudent);      
    }//GEN-LAST:event_cboSubjectActionPerformed

    private void cboClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClassActionPerformed
        JComboBox<String> combo = (JComboBox<String>) evt.getSource();
        Classdto modelClass = (Classdto) combo.getSelectedItem();

        Subjectdto modelSubject = (Subjectdto) cboSubject.getSelectedItem();
        if (modelSubject == null) {
            return;
        }

        List<Studentdto> lstStudent = StudentDAO.GetStudentWithSchedule(new ScheduledtoId(modelClass, modelSubject));
        Studentdto[] arrStudent = lstStudent.toArray(new Studentdto[lstStudent.size()]);
        DefaultComboBoxModel dmdCboStudent = new DefaultComboBoxModel(arrStudent);
        cboStudent.setModel(dmdCboStudent);
    }//GEN-LAST:event_cboClassActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cboClass;
    private javax.swing.JComboBox<String> cboStudent;
    private javax.swing.JComboBox<String> cboSubject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblInfoTranscript;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JScrollPane pnlTable;
    private javax.swing.JTable tblTranscript;
    private javax.swing.JTextField txtScoresEnd;
    private javax.swing.JTextField txtScoresMid;
    private javax.swing.JTextField txtScoresOther;
    private javax.swing.JTextField txtScoresSum;
    // End of variables declaration//GEN-END:variables
}
