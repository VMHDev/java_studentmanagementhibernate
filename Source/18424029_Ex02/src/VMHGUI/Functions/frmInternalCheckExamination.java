/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VMHGUI.Functions;

import VMHBUS.*;
import VMHDAO.*;
import VMHDTO.*;
import VMHPOJO.*;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author VMHIT
 */
public class frmInternalCheckExamination extends javax.swing.JInternalFrame {

    private Studentdto objStudent;

    /**
     * Creates new form frmInternalClass
     */
    public frmInternalCheckExamination() {
        initComponents();
        lblInfoCheckExamination.setHorizontalAlignment(SwingConstants.CENTER);
        lblInfoCheckExamination.setVerticalAlignment(SwingConstants.CENTER);

        LoadDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatusCheck = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pnlTable = new javax.swing.JScrollPane();
        tblCheck = new javax.swing.JTable();
        pnlInfo = new javax.swing.JPanel();
        lblInfoCheckExamination = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cboSubject = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboClass = new javax.swing.JComboBox<>();
        txtScoresWish = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtStudentName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtReason = new javax.swing.JTextArea();
        cboScoresType = new javax.swing.JComboBox<>();
        txtStudentCode = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Phúc khảo");

        btnExit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnExit.setText("Thoát");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 0));

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Danh sách các lịch phúc khảo hiện tại:");

        javax.swing.GroupLayout lblStatusCheckLayout = new javax.swing.GroupLayout(lblStatusCheck);
        lblStatusCheck.setLayout(lblStatusCheckLayout);
        lblStatusCheckLayout.setHorizontalGroup(
            lblStatusCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblStatusCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit)
                .addGap(32, 32, 32))
        );

        lblStatusCheckLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnExit, btnSave});

        lblStatusCheckLayout.setVerticalGroup(
            lblStatusCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblStatusCheckLayout.createSequentialGroup()
                .addGroup(lblStatusCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnExit)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblStatusCheckLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDelete, btnExit, btnSave});

        tblCheck.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCheckMouseClicked(evt);
            }
        });
        pnlTable.setViewportView(tblCheck);

        lblInfoCheckExamination.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblInfoCheckExamination.setText("Thông tin phúc khảo");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Môn học:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setLabelFor(txtScoresWish);
        jLabel2.setText("MSSV:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setLabelFor(txtScoresWish);
        jLabel5.setText("Cột phúc khảo:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Lớp:");

        txtScoresWish.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setLabelFor(txtScoresWish);
        jLabel3.setText("Điểm mong muốn:");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Tên:");

        txtStudentName.setEditable(false);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Lý do:");

        txtReason.setColumns(20);
        txtReason.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtReason.setRows(5);
        jScrollPane1.setViewportView(txtReason);

        cboScoresType.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtStudentCode.setEditable(false);
        txtStudentCode.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblInfoCheckExamination, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoLayout.createSequentialGroup()
                        .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboSubject, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboScoresType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtStudentCode))
                        .addGap(18, 18, 18)
                        .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtScoresWish)
                            .addComponent(txtStudentName)))
                    .addComponent(jScrollPane1))
                .addGap(25, 25, 25))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfoCheckExamination)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cboClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStudentCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtScoresWish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cboScoresType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTable)
            .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblStatusCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatusCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void LoadDefault() {
        try {
            txtStudentCode.setText(clsParameterSys.getUserName());
            objStudent = StudentDAO.GetStudentWithCode(clsParameterSys.getUserName());
            if (objStudent == null) {
                JOptionPane.showMessageDialog(null, "Bạn đang ở quyền giáo vụ. Không thể thực hiện phúc khảo", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            txtStudentName.setText(objStudent.getStudentName());
            LoadDataToTable();
            LoadDataToCombobox();
        } catch (IOException ex) {
            Logger.getLogger(frmInternalCheckExamination.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void LoadDataToCombobox() {
        List<Classdto> arrlstClass = ClassDAO.GetAllClass();
        arrlstClass.add(0, null);
        Classdto[] arrClass = arrlstClass.toArray(new Classdto[arrlstClass.size()]);
        DefaultComboBoxModel dmdCboClass = new DefaultComboBoxModel(arrClass);
        cboClass.setModel(dmdCboClass);

        List<Subjectdto> arrlstSubject = SubjectDAO.GetAllSubject();
        arrlstSubject.add(0, null);
        Subjectdto[] arrSubject = arrlstSubject.toArray(new Subjectdto[arrlstClass.size()]);
        DefaultComboBoxModel dmdCboSubject = new DefaultComboBoxModel(arrSubject);
        cboSubject.setModel(dmdCboSubject);

        //Ref: https://stackoverflow.com/questions/29461321/conversion-of-string-to-jcombobox
        cboScoresType.addItem(new KeyValue("M", "Giữa kỳ"));
        cboScoresType.addItem(new KeyValue("E", "Cuối kỳ"));
        cboScoresType.addItem(new KeyValue("O", "Khác"));
        cboScoresType.addItem(new KeyValue("S", "Tổng"));
    }

    public void LoadDataToTable() throws IOException {
        String[] colNames = new String[]{"Môn học", "Lớp", "Từ ngày", "Đến ngày", "ID Class", "ID Subject"};
        DefaultTableModel modelObj = new DefaultTableModel(null, colNames);
        List<Checkexaminationscheduledto> lstObj = CheckExaminationScheduleDAO.GetAllCheckExaminationSchedule();

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        for (int i = 0; i < lstObj.size(); i++) {
            @SuppressWarnings("UseOfObsoleteCollectionType")
            Vector<String> vecDataLine = new Vector<String>();
            vecDataLine.add(0, lstObj.get(i).getId().getSubjectId().getSubjectName());
            vecDataLine.add(1, lstObj.get(i).getId().getClassId().getClassCode());
            String strDateFrom = dateFormat.format(lstObj.get(i).getFormDate());
            vecDataLine.add(2, strDateFrom);
            String strDateTo = dateFormat.format(lstObj.get(i).getToDate());
            vecDataLine.add(3, strDateTo);
            vecDataLine.add(4, Integer.toString(lstObj.get(i).getId().getSubjectId().getId()));
            vecDataLine.add(5, Integer.toString(lstObj.get(i).getId().getClassId().getId()));
            modelObj.addRow(vecDataLine);
        }
        tblCheck.setModel(modelObj);
    }

    @SuppressWarnings("null")
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Boolean rs = false;

        if (txtScoresWish.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập điểm mong muốn", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Kiểm tra có lịch phúc khảo nào không?
        Classdto modelClass = (Classdto) cboClass.getSelectedItem();
        Subjectdto modelSubject = (Subjectdto) cboSubject.getSelectedItem();
        if (modelClass == null || modelSubject == null) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một lịch phúc khảo!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Checkexaminationscheduledto objCheckSchedule = CheckExaminationScheduleDAO.GetCheckexaminationscheduleWithClassSubject(modelClass, modelSubject);
        if (objCheckSchedule == null) {
            JOptionPane.showMessageDialog(null, "Hiện tại phúc khảo chưa được tạo!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Lấy dữ liệu
        KeyValue modelScoresType = (KeyValue) cboScoresType.getSelectedItem();
        Float scoresAfter = 0F;
        Float scoresWish = Float.parseFloat(txtScoresWish.getText());
        String reason = txtReason.getText();

        // Kiểm tra phúc tạo đã tồn tại chưa?
        CheckexaminationdtoId objId = new CheckexaminationdtoId(objStudent, objCheckSchedule);
        Checkexaminationdto objCheck = CheckExaminationDAO.GetCheckexaminationWithID(objId);

        if (objCheck == null) // Thêm
        {
            Checkexaminationdto objIns = new Checkexaminationdto(objId, modelScoresType.getID(), scoresWish, scoresAfter, reason, 'W');
            rs = CheckExaminationDAO.AddCheckexamination(objIns);
            if (rs == true) {
                JOptionPane.showMessageDialog(null, "Thêm thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                LoadDefault();
            } else {
                JOptionPane.showMessageDialog(null, "Thêm thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else // Cập nhật
        {
            if (objCheck.getStatusCheck() != 'W') {
                JOptionPane.showMessageDialog(null, "Phúc khảo đang xem xét. Không cập nhật được", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
                return;
            }
            objCheck.setScoresWish(scoresWish);
            objCheck.setReason(reason);
            objCheck.setUpdatedDate(new Date());
            rs = CheckExaminationDAO.UpdateCheckexamination(objCheck);

            if (rs == true) {
                JOptionPane.showMessageDialog(null, "Cập nhật thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                LoadDefault();
            } else {
                JOptionPane.showMessageDialog(null, "Cập nhật thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblCheck.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn dữ liệu cần xóa", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn chắc chắn muốn xóa?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.NO_OPTION || dialogResult == JOptionPane.CLOSED_OPTION) {
            return;
        }
        // Kiểm tra có lịch phúc khảo nào không?
        Classdto modelClass = (Classdto) cboClass.getSelectedItem();
        Subjectdto modelSubject = (Subjectdto) cboSubject.getSelectedItem();
        Checkexaminationscheduledto objCheckSchedule = CheckExaminationScheduleDAO.GetCheckexaminationscheduleWithClassSubject(modelClass, modelSubject);
        if (objCheckSchedule == null) {
            JOptionPane.showMessageDialog(null, "Hiện tại phúc khảo chưa được tạo!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Lấy phúc khảo cần xóa
        CheckexaminationdtoId objId = new CheckexaminationdtoId(objStudent, objCheckSchedule);
        Checkexaminationdto objCheck = CheckExaminationDAO.GetCheckexaminationWithID(objId);
        if (objCheck != null) {
            objCheck.setIsActive(false);
            objCheck.setUpdatedDate(new Date());
            Boolean rs = CheckExaminationDAO.UpdateCheckexamination(objCheck);
            if (rs) {
                JOptionPane.showMessageDialog(null, "Xóa thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                LoadDefault();
            } else {
                JOptionPane.showMessageDialog(null, "Xóa thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Không có dữ liệu để xóa", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void tblCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCheckMouseClicked
        JTable sourceTable = (JTable) evt.getSource();
        int row = sourceTable.rowAtPoint(evt.getPoint());

        Integer subjectID = Integer.parseInt(sourceTable.getModel().getValueAt(row, 4).toString());
        clsUtilityCombobox.setSelectSubjectWithID(cboSubject, subjectID);
        Integer classID = Integer.parseInt(sourceTable.getModel().getValueAt(row, 5).toString());
        clsUtilityCombobox.setSelectClassWithID(cboClass, classID);
    }//GEN-LAST:event_tblCheckMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cboClass;
    private javax.swing.JComboBox<Object> cboScoresType;
    private javax.swing.JComboBox<String> cboSubject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInfoCheckExamination;
    private javax.swing.JPanel lblStatusCheck;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JScrollPane pnlTable;
    private javax.swing.JTable tblCheck;
    private javax.swing.JTextArea txtReason;
    private javax.swing.JTextField txtScoresWish;
    private javax.swing.JTextField txtStudentCode;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables
}
