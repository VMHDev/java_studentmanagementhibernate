/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VMHGUI.Import;

import VMHDAO.*;
import VMHDTO.*;
import VMHPOJO.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author VMHIT
 */
public class frmInternalImportTranscript extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmInternalImportSchedule
     */
    public frmInternalImportTranscript() {
        initComponents();
        LoadDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pnlInfo = new javax.swing.JPanel();
        btnFileChoose = new javax.swing.JButton();
        txtFilePath = new javax.swing.JTextField();
        lblFilePath = new javax.swing.JLabel();
        lblClass = new javax.swing.JLabel();
        cboClass = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cboSubject = new javax.swing.JComboBox<>();
        pnlTable = new javax.swing.JScrollPane();
        tblTranscript = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);
        setTitle("Nhập bảng điểm từ CSV");

        btnFileChoose.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnFileChoose.setText("Chọn File");
        btnFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileChooseActionPerformed(evt);
            }
        });

        txtFilePath.setEditable(false);
        txtFilePath.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblFilePath.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFilePath.setLabelFor(txtFilePath);
        lblFilePath.setText("Đường dẫn File:");

        lblClass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblClass.setLabelFor(cboClass);
        lblClass.setText("Lớp:");

        cboClass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        btnSave.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Môn học:");

        cboSubject.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(lblClass)
                    .addComponent(lblFilePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addComponent(cboClass, 0, 428, Short.MAX_VALUE)
                    .addComponent(cboSubject, 0, 428, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFileChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFileChoose)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClass)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pnlInfoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cboClass, cboSubject, txtFilePath});

        tblTranscript.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "MSSV", "Họ tên", "Điểm GK", "Điểm CK", "Điểm khác", "Điểm tổng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pnlTable.setViewportView(tblTranscript);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTable)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadDefault() {
        txtFilePath.setText("");
        LoadDataToCombobox();
    }

    private void LoadDataToTable() throws IOException {
        if (txtFilePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Chưa chọn file! Vui lòng chọn!", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(txtFilePath.getText()), "UTF-8"))) {
            String[] colNames = new String[]{"STT", "MSSV", "Họ tên", "Điểm GK", "Điểm CK", "Điểm khác", "Điểm tổng"};
            DefaultTableModel modelStudent = new DefaultTableModel(null, colNames);
            String line = br.readLine();
            if (!line.equals("STT,MSSV,Họ tên,Điểm GK,Điểm CK,Điểm khác,Điểm tổng")) {
                JOptionPane.showMessageDialog(null, "File không đúng cấu trúc! Vui lòng chọn lại", "Cảnh báo", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ArrayList<String[]> arrlstData = new ArrayList<String[]>();
            while (line != null) {
                String[] dataLine = line.split(",");
                arrlstData.add(dataLine);
                line = br.readLine();
            }

            for (int i = 1; i < arrlstData.size(); i++) {
                modelStudent.addRow(arrlstData.get(i));
            }

            tblTranscript.setModel(modelStudent);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmInternalImportTranscript.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void LoadDataToCombobox() {
        List<Classdto> arrlstClass = ClassDAO.GetAllClass();
        Classdto[] arrClass = arrlstClass.toArray(new Classdto[arrlstClass.size()]);
        DefaultComboBoxModel dmdCboClass = new DefaultComboBoxModel(arrClass);
        cboClass.setModel(dmdCboClass);

        List<Subjectdto> arrlstSubject = SubjectDAO.GetAllSubject();
        Subjectdto[] arrSubject = arrlstSubject.toArray(new Subjectdto[arrlstClass.size()]);
        DefaultComboBoxModel dmdCboSubject = new DefaultComboBoxModel(arrSubject);
        cboSubject.setModel(dmdCboSubject);
    }

    public ArrayList<Transcriptdto> GetDataToArrayList(DefaultTableModel modelTable) {
        @SuppressWarnings("Convert2Diamond")
        ArrayList<Transcriptdto> lstTranscript = new ArrayList<Transcriptdto>();
        for (int i = 0; i < modelTable.getRowCount(); i++) {
            // Lấy dữ liệu lớp
            Classdto objCboClass = (Classdto) cboClass.getSelectedItem();
            
            // Lấy dữ liệu môn học
            Subjectdto objCboSubject = (Subjectdto) cboSubject.getSelectedItem();
            
            // Lấy dữ liệu sinh viên
            String sStudentCode = modelTable.getValueAt(i, 1).toString();
            Studentdto objStudent = StudentDAO.GetStudentWithCode(sStudentCode);
            
            if (objStudent == null) {
                JOptionPane.showMessageDialog(null, "Sinh viên mã số " + sStudentCode + " học lớp " + objCboClass.getClassCode() + " không học môn " + objCboSubject.getSubjectName() + ".\nĐiểm của sinh viên này sẽ không lưu", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            } else {
                //Lấy dữ liệu khác
                Float scoresMid = Float.parseFloat(modelTable.getValueAt(i, 3).toString());
                Float scoresEnd = Float.parseFloat(modelTable.getValueAt(i, 4).toString());
                Float scoresOther = Float.parseFloat(modelTable.getValueAt(i, 5).toString());
                Float scoresSum = Float.parseFloat(modelTable.getValueAt(i, 6).toString());
                
                //Tạo đối tượng Sinh viên
                TranscriptdtoId objID = new TranscriptdtoId(objStudent, objCboClass, objCboSubject);
                Transcriptdto objTranscript = new Transcriptdto(objID, scoresMid, scoresEnd, scoresOther, scoresSum);
                
                //Thêm đối tượng vào danh sách
                lstTranscript.add(objTranscript);
            }
        }
        return lstTranscript;
    }

    private void btnFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileChooseActionPerformed
        try {
            JFileChooser frmFileChoose = new JFileChooser("./filecsv");
            frmFileChoose.setDialogTitle("Chọn file nhập liệu");
            FileNameExtensionFilter filterExtension = new FileNameExtensionFilter("Các tập tin *.csv", "csv");
            frmFileChoose.setFileFilter(filterExtension);
            int chon = frmFileChoose.showOpenDialog(null);
            if (chon == JFileChooser.APPROVE_OPTION) {

                File f = frmFileChoose.getSelectedFile();
                txtFilePath.setText(f.getAbsolutePath());
                LoadDataToTable();
            }
        } catch (IOException ex) {
            Logger.getLogger(frmInternalImportTranscript.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFileChooseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DefaultTableModel modelDataTable = (DefaultTableModel) (tblTranscript.getModel());
        ArrayList<Transcriptdto> lstSchedule = GetDataToArrayList(modelDataTable);

        Integer rs = 0;
        for (Transcriptdto item : lstSchedule) {
            rs = TranscriptDAO.UpdateScoresTranscript(item);
        }
        if (rs == 1 || rs == -1) {
            JOptionPane.showMessageDialog(null, "Nhập liệu thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Nhập liệu thất bại", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFileChoose;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cboClass;
    private javax.swing.JComboBox<String> cboSubject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblFilePath;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JScrollPane pnlTable;
    private javax.swing.JTable tblTranscript;
    private javax.swing.JTextField txtFilePath;
    // End of variables declaration//GEN-END:variables
}
